##### Assigment 1, Rental Detail #####

1. Create Rental Detail class component
2. in render function just output text "I am detail component"
3. Good luck have fun


##### Assigment 2, Get Rental From Array By Id #####

1. Find Rental by ID in array and send it in action
2. Complete Reducer similiar as we did rentalsReducer
3. Good luck have fun if you are stuck continue video and follow me


##### Assigment 3, Create Login and Register #####

1. Create new folder in "components" with name "login" and inside create class component Login
2. Create new folder in "components" with name "register" and inside create class component Register
3. Create routes to these components -  "/login" to Login Component
                                     -  "/register" to Register Component

4. Test if Routing Works!
5. Good luck have fun if you are stuck continue video and follow me


##### Assigment 4, Create Login Redux Form #####
1. Copy file provided in resources of this lecture and paste it to "render" of  "Login.js" component;
2. Create LoginForm.js in "login folder"
3. In Login Form create "Email" and "Password" inputs, similiar as in Register Form

NOTE: You do not need to handle validation and errors yet.

4. In "Login" component create function "loginUser" and console log this data on submit form.
5. Good luck have fun if you are stuck continue video and follow me


##### Assigment 5, Login Redux Component #####

1. Apply connect HOC to login component

NOTE: Do not forget to remove first export in Login.js since we are exporting default with connect
      In App.js fix Login import.

2. Create mapStateToProps function and provide it to Login component
3. In loginUser dispatch action login
4. Try to login user, check network tab
5. Good luck have fun if you are stuck continue video and follow me


########## ASSIGNMENT 6, Create rental-search ############

1. Create "RentalSearchListing" with connect inside of rental-listing folder
2. Inside render function return same code as in RentalListing component
3. Create simple route "/rentals/:city/homes" to component
4. Inside of RentalSearch listing in componentWillMount get :city from url and set it to state
   similiar as we doing in RentalDetail
5. Display city somewhere in render function
5. Test to navigate to this route
6. Have fun, if you are stuck continue video and follow me.


########## ASSIGNMENT 6, Create rental create redux form ############
1. Create RentalCreateForm.js in "rental-create"
2. Apply "reduxForm" HOC to it
3. For now create just inputs for --  title, city, street, bedrooms, dailyRate since other fields are different types
--you can create other inputs if you feel like (: - image, category, descripton, shared
4. get values from FORM and display them after form submit.
5. Have fun, if you are stuck continue video and follow me.

########## ASSIGNMENT 7, Create action to create rental ############
1. Create new action in "actions/index.js", we do not want to dispatch action because there will be no state update
2. send post request to "/rentals" with rental data from form
3. Do not forget to catch error
4. In RentalCreate.js call this action
5. On success redirect to '/rentals' , how you redirect is up to you (withRouter or <Redirect />)
6. On fail display errors
7. Have fun, if you are stuck continue video and follow me.

########## ASSIGNMENT 8, Create Rental and Booking Manage Components ############
1. Create new class components "BookingManage" and "RentalManage" in "components/rental/rental-manage" and "components/booking/booking-manage" folder

2. In render function display just some h1 tag with name of component
3. Create routing to these new components, paths should be "/rentals/manage" and "/bookings/manage"
NOTE: Routes must be protected
4. Have fun, if you are stuck continue video and follow me.

########## ASSIGNMENT 9,Get Bookings From Server ############
1. Create new reducer and call it "booking-reducer.js"
2. Write Initial state for this reducer: {data: [], errors: []}
3. Inside create reducer function with name "userBookingsReducer" and specify these cases:
        1. FETCH_USER_BOOKINGS_INIT
        2. FETCH_USER_BOOKINGS_SUCCESS
        3. FETCH_USER_BOOKINGS_FAIL
  - and change bookings state according to these cases (NOTE: it is similiar to rentals reducer)
4. Do not forget to register this reducer in "index.js"
5. Create action creators "fetchUserBookings" and inside return function with "dispatch"
    - before request dispatch action "fetchUserBookingsInit"
    - make authorized GET request to "/api/v1/rentals/manage" and when you get success response
      dispatch "fetchUserBookingsSuccess" with bookings from response
    - if you get error dispatch "fetchUserBookingsFail" with error from response
6. Make ManageBooking Component connected with redux and get userBookings
7. Make just simple iteration of userBookings in render fuction and display some proprties of booking
   like startAt, endtAt
8. Have fun, if you are stuck continue video and follow me.

########## ASSIGNMENT 10,Get Rentals From Server ############
1. Create state on "RentalManage" component : {userRentals: [], errors:[]}
2. Create action to get user rentals, call this function "getUserRentals"
3. send authorized GET request to "/api/v1/rentals/manage"
4. On success just return data
5. On errors return errors from response
6. Call this action in "componentWillMount" in RentalManage component
7. if you get data or errors change state of component
NOTE: This is similiar to register action
8. Have fun, if you are stuck continue video and follow me.

########## ASSIGNMENT 11,Create Booking Card ############

1. Create functional "BookinCard.js" component in "booking-manage" folder
2. Copy there layout from "BookingManage" starting div with className="col-md-4"
3. Do not forget to send booking on prop to your functional component
4. In "BookingManage" create function to iterate bookings and each iteration display your new "BookingCard" component
5. Have fun, if you are stuck continue video and follow me.

########## ASSIGNMENT 12,Create Rental Manage Card ############

1. Create functional "RentalManageCard.js" component in "rental-manage" folder
2. Copy there layout from "RentalManage" starting div with className="col-md-4"
3. Replace all hardcoded informations with data from rental
3. Do not forget to send rental on prop to your functional component
4. In "RentalManage" create function to iterate rentals and each iteration display your new "RentalManageCard" component
5. Create "isFetching" on your component state, before request set it to true, and on response (error, or success) to false
6. Handle display of error just when rentals are empty and "isFetching" is false
5. Have fun, if you are stuck continue video and follow me.


########## ASSIGNMENT 13, Delete Rental Action ############
1. Create function in "actions/index.js" to delete rental
   NOTE: Do not use dispatch since we dont have redux for user rentals

2. Send authorized DELETE request to '/api/v1/rentals/<rentalId>'
3. On Success return data from respnse
4. On Error return promise reject with errors

// Optional --------------------------

5. in RentalManage create function to delete Rental, inside of function call action of delete rental from actions
6. Send this delete function as prop to "RentalManageCard"
   NOTE: Do not forget to bind this context
7. In "RentalManageCard" call function sent on props when user will confirm deletion
8. Do not forget to call function with rental._id since we need id to delete rental
9. On success response change state of component, so remove deleted rental from array of "userRentals"
   and update state
10. On Fail display toast message and display error
11. Have fun, if you are stuck continue video and follow me.



########## ASSIGNMENT 14, Update Function ############
1. Create "updateRental" function inside of RentalDetailUpdate.js.
2. Inside function just console log out some text and send this function as a prop called "updateEntity" to EditableInput
3. In EditableInput first create new button to save new changes in input
4. Create onClick event and call function of EditableInput called "update" - create this function (:
5. inside "update" function call function we are receiving on props "updateEntity"
6. Test it out, when we click save now we should see our text in console log
7. Have fun, if you are stuck continue video and follow me.


########## ASSIGNMENT 15, Actions  ############
1. Create 2 new types: UPDATE_RENTAL_SUCCESS, UPDATE_RENTAL_FAIL
2. Create action creator "updateRentalSuccess" and return action with type of UPDATE_RENTAL_SUCCESS
  and rental we are getting in argument of this function.
3. Create action creator "updateRentalFail" and return action with type of UPDATE_RENTAL_FAIL
  and errors we are getting back in argument of this function.
4. Create action creator called updateRental and return function with dispatch.
5. Use axios instance and send patch request to '/rentals/rentalId' with data we are getting from RentalDetailUpdate Component
6. If everything went succesfuly dispatch function "updateRentalSuccess" and provide inside updatedRental
  we are getting back from server
7. If request failed dispatch function "updateRentalFail" and provide inside errors
  we are getting back from server
8. Dispatch action creator from RentalDetailUpdate component instead of console.log. You need also get id from rental and provide it to this function.
TIP: You can send dispatch as props from RentalDetail component.
9. Test it out see in network tab if your request was succesful.
10. Have fun, if you are stuck continue video and follow me.


########## ASSIGNMENT 16, Update Reducers ############
1. Create 2 new cases in selectedRentalReducer for UPDATE_RENTAL_SUCCESS, UPDATE_RENTAL_FAIL
2. on UPDATE_RENTAL_SUCCESS set new state with rental we are getting form actions
3. on UPDATE_RENTAL_FAIL return new state with errors we would get from server
NOTE: Don't forget to add errors array to initial state of rental
4. Check redux chrome extenstion if state is correctly set
5. Have fun, if you are stuck continue video and follow me.


########## ASSIGNMENT 17, Reload Map ############
1. Create 2 new action creators: "reloadMap" and "reloadMapFinish"
2. In reloadMap return object with type: "RELOAD_MAP"
3. In reloadMapFinish return object with type: "RELOAD_MAP_FINISH"
4. Create new reducer rentalMapReducer and register it in index.js in reducers folder
5. in rental Map reducer create initial state of object with one field of "isReloading"
  and set it to false as initial value
6. Write 2 new cases in reducer RELOAD_MAP and RELOAD_MAP_FINISH ,
   in "RELOAD_MAP" set state of "isReloading" to true and in "RELOAD_MAP_FINISH" to false
7. Connect our "RentalMap" component to store via connect. And create mapStateToProp function.
8. get our isReloading from state and pass it to googleMap as prop
9. in RentalMap component create also function to dispatch action "reloadMapFinish" and pass it as prop
  to google map component




10. in GoogleMapComponent in render function check for prop "isReloading" if it is true
    call function "getGeocodedLocation"
11. After location is loaded dont forget to call "reloadMapFinish" which we send as a prop, otherwise
    our render function will be called over and over again
12. Inside of our actions when we are getting updated rental inside of then function dispatch "reloadMap"
    but first check if we are updating street or city
13. Have fun, if you are stuck continue video and follow me.










